<?php
/**
 * TemplateComponentButtonsButtonsInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DengroCrm\VonageWhatsAppTemplateManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WhatsApp Template Management API
 *
 * The Messages API now offers the WhatsApp Template Management API that allow you to manage templates for your WABAs and cut out the manual step of submitting and checking templates manually. You can manage your templates using the Template Management API, including adding new templates, retrieving their statuses, and deleting any that are already in use. Different sorts of media can be sent with each WhatsApp message template. You can manage your media files via the API and set up extra features to improve their functionality.
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: devrel@vonage.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DengroCrm\VonageWhatsAppTemplateManagement\Model;

use \ArrayAccess;
use \DengroCrm\VonageWhatsAppTemplateManagement\ObjectSerializer;

/**
 * TemplateComponentButtonsButtonsInner Class Doc Comment
 *
 * @category Class
 * @package  DengroCrm\VonageWhatsAppTemplateManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TemplateComponentButtonsButtonsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TemplateComponentButtons_buttons_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'text' => 'string',
        'url' => 'string',
        'phone_number' => 'string',
        'flow_id' => 'string',
        'flow_name' => 'string',
        'flow_json' => 'string',
        'flow_action' => 'string',
        'navigate_screen' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'text' => null,
        'url' => 'uri',
        'phone_number' => null,
        'flow_id' => null,
        'flow_name' => null,
        'flow_json' => null,
        'flow_action' => null,
        'navigate_screen' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'text' => false,
        'url' => false,
        'phone_number' => false,
        'flow_id' => false,
        'flow_name' => false,
        'flow_json' => false,
        'flow_action' => false,
        'navigate_screen' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'text' => 'text',
        'url' => 'url',
        'phone_number' => 'phone_number',
        'flow_id' => 'flow_id',
        'flow_name' => 'flow_name',
        'flow_json' => 'flow_json',
        'flow_action' => 'flow_action',
        'navigate_screen' => 'navigate_screen'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'text' => 'setText',
        'url' => 'setUrl',
        'phone_number' => 'setPhoneNumber',
        'flow_id' => 'setFlowId',
        'flow_name' => 'setFlowName',
        'flow_json' => 'setFlowJson',
        'flow_action' => 'setFlowAction',
        'navigate_screen' => 'setNavigateScreen'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'text' => 'getText',
        'url' => 'getUrl',
        'phone_number' => 'getPhoneNumber',
        'flow_id' => 'getFlowId',
        'flow_name' => 'getFlowName',
        'flow_json' => 'getFlowJson',
        'flow_action' => 'getFlowAction',
        'navigate_screen' => 'getNavigateScreen'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_QUICK_REPLY = 'QUICK_REPLY';
    public const TYPE_URL = 'URL';
    public const TYPE_PHONE_NUMBER = 'PHONE_NUMBER';
    public const TYPE_FLOW = 'FLOW';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_QUICK_REPLY,
            self::TYPE_URL,
            self::TYPE_PHONE_NUMBER,
            self::TYPE_FLOW,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('flow_id', $data ?? [], null);
        $this->setIfExists('flow_name', $data ?? [], null);
        $this->setIfExists('flow_json', $data ?? [], null);
        $this->setIfExists('flow_action', $data ?? [], null);
        $this->setIfExists('navigate_screen', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of button
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            error_log(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text The text displayed on the button.
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL to which the end-user will be directed when hitting the button.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number Phone number to which a phone call would be placed by the end-user when hitting the button.
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets flow_id
     *
     * @return string|null
     */
    public function getFlowId()
    {
        return $this->container['flow_id'];
    }

    /**
     * Sets flow_id
     *
     * @param string|null $flow_id The unique ID of the Flow. Cannot be used if flow_name or flow_json parameters are provided. Only one of these parameters is required.
     *
     * @return self
     */
    public function setFlowId($flow_id)
    {
        if (is_null($flow_id)) {
            throw new \InvalidArgumentException('non-nullable flow_id cannot be null');
        }
        $this->container['flow_id'] = $flow_id;

        return $this;
    }

    /**
     * Gets flow_name
     *
     * @return string|null
     */
    public function getFlowName()
    {
        return $this->container['flow_name'];
    }

    /**
     * Sets flow_name
     *
     * @param string|null $flow_name The name of the Flow. Supported in Cloud API only. The Flow ID is stored in the message template, not the name, so changing the Flow name will not affect existing message templates. Cannot be used if flow_id or flow_json parameters are provided. Only one of these parameters is required.
     *
     * @return self
     */
    public function setFlowName($flow_name)
    {
        if (is_null($flow_name)) {
            throw new \InvalidArgumentException('non-nullable flow_name cannot be null');
        }
        $this->container['flow_name'] = $flow_name;

        return $this;
    }

    /**
     * Gets flow_json
     *
     * @return string|null
     */
    public function getFlowJson()
    {
        return $this->container['flow_json'];
    }

    /**
     * Sets flow_json
     *
     * @param string|null $flow_json The Flow JSON encoded as string with escaping. The Flow JSON specifies the content of the Flow. Supported in Cloud API only. Cannot be used if flow_id or flow_name parameters are provided. Only one of these parameters is required.
     *
     * @return self
     */
    public function setFlowJson($flow_json)
    {
        if (is_null($flow_json)) {
            throw new \InvalidArgumentException('non-nullable flow_json cannot be null');
        }
        $this->container['flow_json'] = $flow_json;

        return $this;
    }

    /**
     * Gets flow_action
     *
     * @return string|null
     */
    public function getFlowAction()
    {
        return $this->container['flow_action'];
    }

    /**
     * Sets flow_action
     *
     * @param string|null $flow_action Either navigate or data_exchange. (Default value: navigate)
     *
     * @return self
     */
    public function setFlowAction($flow_action)
    {
        if (is_null($flow_action)) {
            throw new \InvalidArgumentException('non-nullable flow_action cannot be null');
        }
        $this->container['flow_action'] = $flow_action;

        return $this;
    }

    /**
     * Gets navigate_screen
     *
     * @return string|null
     */
    public function getNavigateScreen()
    {
        return $this->container['navigate_screen'];
    }

    /**
     * Sets navigate_screen
     *
     * @param string|null $navigate_screen Optional if flow_action is navigate. The unique ID of the Screen in the Flow. Only used if flow_action is set to navigate. (Default value: \"FIRST_ENTRY_SCREEN\")
     *
     * @return self
     */
    public function setNavigateScreen($navigate_screen)
    {
        if (is_null($navigate_screen)) {
            throw new \InvalidArgumentException('non-nullable navigate_screen cannot be null');
        }
        $this->container['navigate_screen'] = $navigate_screen;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


